{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","sys","weather","stop","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAUeA,EARA,kBAEbC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,6BAAd,kDCMYC,EARF,SAAAC,GAAK,OACNL,EAAAC,EAAAC,cAAA,QAAMI,SAAUD,EAAME,YACxBP,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,OAAOC,YAAY,YACrCV,EAAAC,EAAAC,cAAA,SAAOM,KAAK,OAAOC,KAAK,UAAUC,YAAY,eAC9CV,EAAAC,EAAAC,cAAA,+BCsBDS,EA5BC,SAAAN,GAAK,OACnBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbE,EAAMO,MAAQP,EAAMQ,SAAWb,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aAC9BH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMO,KAAzC,KAAkDP,EAAMQ,UAIzDR,EAAMS,aAAed,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,gBACpBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMS,YAAzC,MAIDT,EAAMU,UAAYf,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,aACjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMU,SAAzC,MAIDV,EAAMW,aAAehB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAb,eACpBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,kBAAhB,IAAmCE,EAAMW,YAAzC,MAIDX,EAAMY,OAASjB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBE,EAAMY,SClBlDC,SAAU,oCAsEDC,6MAnEXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,KAGXd,iDAAa,SAAAe,EAAOC,GAAP,IAAAX,EAAAC,EAAAW,EAAAC,EAAA,OAAAC,EAAAzB,EAAA0B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAEQ,iBACInB,EAAOW,EAAES,OAAOC,SAASrB,KAAKsB,MAC9BrB,EAAUU,EAAES,OAAOC,SAASpB,QAAQqB,MAHjCN,EAAAE,KAAA,EAIcK,MAAK,oDAAAC,OAAqDxB,EAArD,KAAAwB,OAA6DvB,EAA7D,WAAAuB,OAA8ElB,EAA9E,kBAJnB,cAIHM,EAJGI,EAAAS,KAAAT,EAAAE,KAAA,EAKUN,EAASc,OALnB,OAKHb,EALGG,EAAAS,KAMLzB,GAAQC,EACR0B,EAAKC,SAAS,CACV1B,YAAaW,EAAKgB,KAAKC,KACvB9B,KAAMa,EAAKhB,KACXI,QAASY,EAAKkB,IAAI9B,QAClBE,SAAUU,EAAKgB,KAAK1B,SACpBC,YAAaS,EAAKmB,QAAQ,GAAG5B,YAC7BC,MAAO,KAGXsB,EAAKC,SAAS,CACV1B,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,wBAtBN,yBAAAW,EAAAiB,SAAAvB,oIA2BT,OAEItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACfH,EAAAC,EAAAC,cAAC4C,EAAD,OAEA9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAC6C,EAAD,CAAMxC,WAAYyC,KAAKzC,aACvBP,EAAAC,EAAAC,cAAC+C,EAAD,CACInC,YAAakC,KAAK5B,MAAMN,YACxBC,SAAUiC,KAAK5B,MAAML,SACrBH,KAAMoC,KAAK5B,MAAMR,KACjBC,QAASmC,KAAK5B,MAAMP,QACpBG,YAAagC,KAAK5B,MAAMJ,YACxBC,MAAO+B,KAAK5B,MAAMH,qBAvDpCiC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8f4c8471.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Titles = () => (\r\n\r\n\t\t<div>\r\n\t\t\t<h1 className=\"title-container__title\">Weather Finder</h1>\r\n\t\t\t<h3 className=\"title-container__subtitle\">Find out temperature, conditions and more...</h3>\r\n\t\t</div>\r\n);\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\n\r\n\r\nconst Form = props => (\r\n            <form onSubmit={props.getWeather /* If btn is clicked getWeather from App.js will run*/}> \r\n        \t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        );\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t\t<div className=\"weather__info\">\r\n\t\t\t{\t//If city and country has value it displays <p> element\r\n\t\t\t\tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t\t\t\t\t<span className=\"weather__value\"> {props.city }, {props.country }</span>\r\n\t\t\t\t</p> \r\n\t\t\t}\r\n\t\t\t{ \t//If temperature  has value it displays <p> element\r\n\t\t\t\tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t\t\t\t\t<span className=\"weather__value\"> {props.temperature }\t</span>\r\n\t\t\t\t</p> \r\n\t\t\t}\r\n\t\t\t{ \t//If humidity has value it displays <p> element\r\n\t\t\t\tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t\t\t\t\t<span className=\"weather__value\"> {props.humidity } </span>\r\n\t\t\t\t</p> \r\n\t\t\t}\r\n\t\t\t{ \t//If description has value it displays <p> element\r\n\t\t\t\tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t\t\t\t\t<span className=\"weather__value\"> {props.description } </span>\r\n\t\t\t</p> \r\n\t\t\t}\r\n\t\t\t{   //If error has value it displays <p> element\r\n\t\t\t\tprops.error && <p className=\"weather__error\">{props.error }</p>  \r\n\t\t\t}\r\n\t\t</div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\nimport Titles from \"./components/Titles\"\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";\r\nimport './App.css';\r\n\r\n\r\nconst API_KEY = '71ec8973bafa2c0e262d8b19ff7f1413'; \r\n\r\nclass App extends React.Component {\r\n    state = { \r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        error: undefined\r\n    }\r\n\r\n    getWeather = async (e) => {\r\n        e.preventDefault(); //Prevevents page refres\r\n        const city = e.target.elements.city.value; //Takes input city value from form.js\r\n        const country = e.target.elements.country.value; //Takes input country value from form.js\r\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`); //Makes api request\r\n        const data = await api_call.json(); //Makes api request to json file\r\n        if (city && country) { //If city and country has value\r\n            this.setState({ //It changes states\r\n                temperature: data.main.temp, //States are coming from api_call.json file\r\n                city: data.name,\r\n                country: data.sys.country,\r\n                humidity: data.main.humidity,\r\n                description: data.weather[0].description,\r\n                error: ''\r\n            });\r\n        } else { //if not\r\n            this.setState({ //It changes states\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: 'Please enter values'\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n\r\n            <div>\r\n                <div className=\"wrapper\">\r\n                    <div className=\"main\">\r\n                        <div className=\"container\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-xs-5 title-container\">\r\n                                <Titles />\r\n                                </div>\r\n                                <div className=\"col-xs-7 form-container\">                                \r\n                                <Form getWeather={this.getWeather/*Makes getweather props and now you can get info from form.js */} />\r\n                                <Weather /*Passes a state values to weather.js */\r\n                                    temperature={this.state.temperature} \r\n                                    humidity={this.state.humidity}\r\n                                    city={this.state.city}\r\n                                    country={this.state.country}\r\n                                    description={this.state.description}\r\n                                    error={this.state.error}\r\n                                />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default App; //Exports App.js ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n\n\nserviceWorker.unregister();\n\n\n\n\n\n"],"sourceRoot":""}